1、在文件 Common/function.php 中的T函数后面取消return语句行，并新增：

/**
 * [SWH|+] OpenCenter/ThinkOX 新增对common下的模板检测
 * 在上面的T函数最后调用：
 * return templateFileChecker($baseUrl,$file,$theme,$extend);
 */
function templateFileChecker($baseUrl, $file, $theme, $extend) {
	if ($extend == 'Addons') {
		if ($theme) {
			$result = $baseUrl . $theme . '/' . $file . C('TMPL_TEMPLATE_SUFFIX');
			if (file_exists($result)) {
				return $result;
			}
		}
		$result = $baseUrl . $file . C('TMPL_TEMPLATE_SUFFIX');
	} else {
		$result = $baseUrl . ($theme ? $theme . '/' : '') . $file . C('TMPL_TEMPLATE_SUFFIX');
	}
	//如果模版存在，则返回该模版
	if (file_exists($result)) {
		return $result;
	}
	//如果模版不存在，则返回公共目录下的模版
	$baseUrl = APP_PATH . 'Common/View/' . ($theme ? $theme . '/' : '');
	$result = $baseUrl . $file . C('TMPL_TEMPLATE_SUFFIX');
	return $result;
}

并照上面注释中所述修改T函数。

2、在文件 Library\Think\Dispatcher.class.php 中Dispatcher类中新增以下方法：

	/**
	 * 清理掉上面getSpace、getModule、getAction、getController方法结果中的非法字符。
	 * 在这三个函数的return部分用self::cleanNotWords(...)包裹即可。
	 * @param  string  $str 	字符串
	 * @param  boolean $allowSlash 	是否允许斜杠（用于getController方法）
	 * @return string
	 * @author swh <swh@admpub.com>
	 */
	static private function cleanNotWords($str, $allowSlash = false) {
		if ($str == '') {
			return '';
		}
		if ($allowSlash) {
			if (strpos($str, '/_')) {
				return '';
			}
			$str = preg_replace('|[^\\w/]+|', '', $str);
			return $str;
		}
		if ($str[0] == '_') {
			return '';
		}
		$str = preg_replace('/[^\\w]+/', '', $str);
		return $str;
	}

并照上面注释中所述修改getSpace、getModule、getAction、getController函数。
注意，在getController函数中调用cleanNotWords时，请把cleanNotWords的第二个参数设为true。

3、将 ThinkPHP.php 文件中的：
define('_PHP_FILE_',    rtrim(str_replace($_SERVER['HTTP_HOST'],'',$_temp[0].'.php'),'/'));
改为：
define('_PHP_FILE_',    $_temp[0].'.php');//[SWH|+]


4、文件 Library\Think\Page.class.php 有修改请不要直接覆盖，如果已经覆盖了，请使用 Library\Think\Page.modified-bak.class.php 文件还原。


5、文件 Common\functions.php 内U函数中，在代码：

			if (isset($var[$varModule])) {
				$module = $var[$varModule];
				unset($var[$varModule]);
			}

后面（亦即代码“if (C('URL_MODEL') == 0) {”上面的两个花括号“}”的前面）增加代码以下代码：

			//[SWH|+]绑定子域名到 [模块/控制器] 时的网址需要删除控制器名称
			if (C('APP_SUB_DOMAIN_DEPLOY')) {
				static $_bindControllers = null;
				is_null($_bindControllers) && $_bindControllers = array_flip(C('APP_SUB_DOMAIN_RULES'));
				if (isset($_bindControllers[$module . '/' . $var[$varController]])) {
					unset($var[$varController]);
				}
			}





====【以下为可选更改(当前已更改)，即不修改也不会影响系统正常运行】====

1、改进静态页面生成
1)、文件 Library\Behavior\WriteHtmlCacheBehavior.class.php 中代码“Storage::put(”之前添加代码行：
$callback=C('HTML_CACHE_BEFORE_WRITE');
并将：
Storage::put(HTML_FILE_NAME, $content, 'html');
改为：
Storage::put(HTML_FILE_NAME, $callback?$callback($content):$content, 'html');

2)、文件 Library\Behavior\ReadHtmlCacheBehavior.class.php 内将checkHTMLCache方法体中的“function_exists($cacheTime)”改为“is_callable($cacheTime)”，

增加HTTP缓存：
在run方法体中在其最内层的if代码块后面增加：
header('Etag:' . NOW_TIME, true, 200);
并在代码“echo Storage::read(HTML_FILE_NAME, 'html');”的前面增加代码：

				if (!empty($_SERVER['HTTP_IF_NONE_MATCH']) && is_numeric($_SERVER['HTTP_IF_NONE_MATCH'])) {
					header('Etag:' . $_SERVER['HTTP_IF_NONE_MATCH'], true, 304);
					exit();
				}
				header('Etag:' . NOW_TIME, true, 200);


此修改用于实现缓存在写入之前的数据处理，用于解决这样的需求：
对外只公开纯静态页面的访问，而这时候我们希望静态页面内的链接总是指向静态页面，
动态页面的链接总是指向动态页面，这样，我们无论是在动态页面还是静态页面都能无障碍的浏览。
所以，要实现这个需求，我们首先在配置文件中把 HTML_CACHE_TIME 的值设为php代码 “function ($cacheFile) {return false;}”来令缓存总是过期，
然后再定义一个函数用来把动态页面内生成的链接替换成静态页面的链接，
并将 HTML_CACHE_BEFORE_WRITE 的值设置为此函数名。
这样，我们内部人员或程序访问动态页面时，就能总是生成新的静态页面，
所谓：哪里更新，点哪里，so easy!
当然，如果能用程序自动请求动态页面的方式来生成自然最好了。
以上，可以在一定程度上解决静态页面文件不能及时更新的问题。


-EOF-